/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package filetransfer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ScrambleTest {
    private static final long seed = 139587135L;
    private static final byte[] testArray = new byte[]
    {
        13, 110, -12, 57, 0, 1, 17, 17, 9
    };

    @Test void scrambleThrowsNoException()
    {
        Scrambler scrambler = new Scrambler(seed);
        scrambler.scramble(testArray);
    }

    @Test void unscrambleThrowsNoException()
    {
        Scrambler scrambler = new Scrambler(seed);
        scrambler.unscramble(testArray);
    }

    @Test void scrambleSizeIdentical()
    {
        Scrambler scrambler = new Scrambler(seed);
        byte[] scrambled = scrambler.scramble(testArray);
        assertEquals(scrambled.length, testArray.length);
    }

    @Test void unscrambleSizeIdentical()
    {
        Scrambler unscrambler = new Scrambler(seed);
        byte[] unscrambled = unscrambler.unscramble(testArray);
        assertEquals(unscrambled.length, testArray.length);
    }

    @Test void scrambledArrayIsScrambled()
    {
        Scrambler scrambler = new Scrambler(seed);
        int matchCount = 0;
        byte[] scrambled = scrambler.scramble(testArray);
        for (int i = 0; i < scrambled.length; i++)
        {
            if (testArray[i] == scrambled[i])
            {
                matchCount++;
            }
        }
        assertNotEquals(matchCount, testArray.length);
    }

    @Test void preScrambleArrayMatchesUnscrambledArray() 
    {
        Scrambler scrambler = new Scrambler(seed);
        byte[] scrambled = scrambler.scramble(testArray);
        
        Scrambler unscrambler = new Scrambler(seed);
        byte[] unscrambled = unscrambler.unscramble(scrambled);

        assertArrayEquals(testArray, unscrambled);
    }

    @Test void hashingFunctionIsNonZero()
    {
        long res = Scrambler.seedFromString("This string surely must have a nonzero hash!");
        assertNotEquals(res, 0);
    }

    /*
     * Note that this test may technically have the ability to fail the assertion,
     * but it is highly unlikely given the difference in the strings.
     */
    @Test void hashingFunctionYieldsDifferentResults()
    {
        long hash1 = Scrambler.seedFromString("First");
        long hash2 = Scrambler.seedFromString("Second");
        assertNotEquals(hash1, hash2);
    }
}
